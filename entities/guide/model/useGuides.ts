/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∞–π–¥–∞–º–∏
 * @layer entities
 */

import { useState, useEffect, useRef } from 'react'
import { guideAPI } from '../api/guideApi'
import type { Guide, GuidesResponse } from './types'

interface UseGuidesParams {
  type: 'popular' | 'user' | 'saved' | 'search'
  userId?: string | undefined
  query?: string
  tags?: string[]
}

export function useGuides({ type, userId, query, tags }: UseGuidesParams) {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const cacheKey = `guides-cache-${type}-${userId || ''}-${query || ''}-${(tags || []).join(',')}`

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ù–ï –∫–µ—à–∏—Ä—É–µ–º - –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
  // –ü–æ–∏—Å–∫ –ö–ï–®–ò–†–£–ï–ú - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
  const shouldUseCache = type !== 'popular'

  // üîß Lazy init - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [guides, setGuides] = useState<Guide[]>(() => {
    if (!shouldUseCache || typeof window === 'undefined') return []

    try {
      const cached = sessionStorage.getItem(cacheKey)
      if (cached) {
        const data = JSON.parse(cached)
        const cacheAge = Date.now() - (data.timestamp || 0)
        const maxAge = type === 'search' ? 5 * 60 * 1000 : 30 * 60 * 1000

        if (data.guides && cacheAge <= maxAge) {
          console.log('üöÄ Init with cache:', data.guides.length, 'guides')
          return data.guides
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–µ—à–∞
    }
    return []
  })

  const [loading, setLoading] = useState(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loading
    return guides.length === 0
  })

  const [loadingMore, setLoadingMore] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const [hasMore, setHasMore] = useState(() => {
    if (!shouldUseCache || typeof window === 'undefined') return true

    try {
      const cached = sessionStorage.getItem(cacheKey)
      if (cached) {
        const data = JSON.parse(cached)
        return data.hasMore !== false
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    return true
  })

  const [currentPage, setCurrentPage] = useState(() => {
    if (!shouldUseCache || typeof window === 'undefined') return 1

    try {
      const cached = sessionStorage.getItem(cacheKey)
      if (cached) {
        const data = JSON.parse(cached)
        return data.currentPage || 1
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    return 1
  })

  // üîß –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –±–µ–∑ –±–µ–ª—ã—Ö –ø—è—Ç–µ–Ω
  // –ú–æ–±–∏–ª—å–Ω—ã–µ: 20 (1-2 –∫–æ–ª–æ–Ω–∫–∏), –ü–ª–∞–Ω—à–µ—Ç—ã: 30 (3 –∫–æ–ª–æ–Ω–∫–∏), –î–µ—Å–∫—Ç–æ–ø: 40 (4-5 –∫–æ–ª–æ–Ω–æ–∫)
  const getPageSize = () => {
    if (typeof window === 'undefined') return 40 // SSR fallback
    const width = window.innerWidth
    if (width < 768) return 20 // mobile
    if (width < 1280) return 30 // tablet
    return 40 // desktop
  }

  const pageSize = getPageSize()

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
  const saveToCache = (guidesData: Guide[], page: number, hasMoreValue: boolean, scrollPosition?: number) => {
    if (!shouldUseCache) return // –ù–µ –∫–µ—à–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ

    try {
      const cacheData = {
        guides: guidesData,
        currentPage: page,
        hasMore: hasMoreValue,
        scrollPosition: scrollPosition ?? window.scrollY,
        timestamp: Date.now()
      }
      sessionStorage.setItem(cacheKey, JSON.stringify(cacheData))
    } catch (error) {
      // –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à
    }
  }

  const fetchGuides = async (page: number = 1, reset: boolean = true) => {
    try {
      if (page === 1) {
        setLoading(true)
        setError(null)
      } else {
        setLoadingMore(true)
      }

      let response: GuidesResponse

      switch (type) {
        case 'popular':
          // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–∞–π–¥—ã - –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—Å–µ –≥–∞–π–¥—ã (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
          response = await guideAPI.getGuides({ page, pageSize })
          break

        case 'user':
          if (!userId || userId === '') {
            throw new Error('userId required for user guides')
          }
          response = await guideAPI.getUserGuides(userId, { page, pageSize })
          break

        case 'saved':
          if (!userId || userId === '') {
            throw new Error('userId required for saved guides')
          }
          response = await guideAPI.getSavedGuides(userId, { page, pageSize })
          break

        case 'search':
          response = await guideAPI.searchGuides({
            query,
            tags,
            userId, // üîß –ü–µ—Ä–µ–¥–∞–µ–º userId –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            page,
            pageSize
          })
          break

        default:
          throw new Error(`Unknown guides type: ${type}`)
      }

      let newGuides = response.data || []

      // –î–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≥–∞–π–¥—ã —Å creationsCount > 0, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏

      const pagination = response.meta?.pagination
      const hasMoreValue = pagination ? pagination.page < pagination.pageCount : false
      const currentPageValue = pagination ? pagination.page : page

      if (reset || page === 1) {
        setGuides(newGuides)
        saveToCache(newGuides, currentPageValue, hasMoreValue)
      } else {
        setGuides(prev => {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ documentId
          const existingIds = new Set(prev.map(guide => guide.documentId))
          const uniqueNewGuides = newGuides.filter(guide => !existingIds.has(guide.documentId))
          const updatedGuides = [...prev, ...uniqueNewGuides]
          saveToCache(updatedGuides, currentPageValue, hasMoreValue)
          return updatedGuides
        })
      }

      setHasMore(hasMoreValue)
      setCurrentPage(currentPageValue)

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–π–¥–æ–≤:', err)
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–π–¥–æ–≤')
    } finally {
      setLoading(false)
      setLoadingMore(false)
    }
  }

  const loadMore = () => {
    if (!loadingMore && hasMore) {
      fetchGuides(currentPage + 1, false)
    }
  }

  const refetch = () => {
    setCurrentPage(1)
    fetchGuides(1, true)
  }

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
  const isInitialMount = useRef(true)

  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    console.log(`üìç useGuides effect triggered:`, {
      type,
      query,
      cacheKey,
      hasInitialData: guides.length > 0,
      isInitialMount: isInitialMount.current
    })

    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ lazy init, —Ç–æ–ª—å–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
    if (isInitialMount.current) {
      isInitialMount.current = false

      if (guides.length > 0 && shouldUseCache) {
        console.log('‚úÖ Using cached data from initialization')

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –∏–∑ –∫–µ—à–∞
        try {
          const cached = sessionStorage.getItem(cacheKey)
          if (cached) {
            const cachedData = JSON.parse(cached)
            if (cachedData.scrollPosition) {
              setTimeout(() => {
                window.scrollTo({ top: cachedData.scrollPosition, behavior: 'instant' })
                console.log('üìç Scroll restored:', cachedData.scrollPosition)
              }, 100)
            }
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        }

        return // –ù–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
      }
    }

    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
    setLoading(true)
    setError(null)

    console.log(`üåê Fetching from API (${shouldUseCache ? 'params changed' : 'caching disabled'})`)
    fetchGuides(1, true)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [type, userId, query, JSON.stringify(tags), cacheKey])

  return {
    guides,
    loading,
    loadingMore,
    error,
    hasMore,
    loadMore,
    refetch
  }
}