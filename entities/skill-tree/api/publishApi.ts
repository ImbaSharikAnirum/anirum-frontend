import type { Node, Edge } from '@xyflow/react';
import type { SkillTree } from '../model/types';
import { skillTreeAPI } from './skillTreeApi';

export interface PublishProgress {
  phase: 'preparing' | 'uploading' | 'complete';
  current: number;
  total: number;
  status: string;
}

export interface PublishResult {
  success: boolean;
  tree?: SkillTree;
  error?: string;
  skillIdMap?: Record<string, string>; // temp ID -> real documentId
  guideIdMap?: Record<string, string>; // temp ID -> real documentId
}

/**
 * –î–∞–Ω–Ω—ã–µ –≥–∞–π–¥–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
interface GuidePublishData {
  id?: number; // Numeric ID –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∞–π–¥–æ–≤
  documentId?: string; // Document ID –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∞–π–¥–æ–≤ –∏–∑ Strapi
  tempId?: string; // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –Ω–æ–≤—ã—Ö –≥–∞–π–¥–æ–≤
  title: string;
  text?: string;
  link?: string;
  image?: string; // base64 –∏–ª–∏ URL
  skillId: string; // –ö –∫–∞–∫–æ–º—É –Ω–∞–≤—ã–∫—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≥–∞–π–¥
}

/**
 * –î–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å guideEdges
 */
interface SkillPublishData {
  documentId?: string;
  tempId?: string;
  title: string;
  position: { x: number; y: number };
  image?: string;
  guideEdges?: Array<{ id: string; source: string; target: string; type?: string }>;
}

/**
 * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ã–∫–æ–≤ —Å –≥–∞–π–¥–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç batch endpoint - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export async function publishSkillTree(
  treeId: string,
  apiTree: SkillTree,
  localNodes: Node[],
  localEdges: Edge[],
  onProgress?: (progress: PublishProgress) => void,
  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–∞–π–¥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
  skillId?: string,
  skillGuideNodes?: Node[],
  skillGuideEdges?: Edge[]
): Promise<PublishResult> {
  try {
    // –§–ê–ó–ê 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    onProgress?.({
      phase: 'preparing',
      current: 1,
      total: 3,
      status: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...',
    });

    const skillNodes = localNodes.filter(node => node.type === 'skill');

    console.log('üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤:');
    console.log('üîç localNodes:', localNodes.length);
    console.log('üîç skillNodes:', skillNodes.length);
    console.log('üîç apiTree.skills:', apiTree.skills?.length);

    // –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ API
    // (—ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –≥–∞–π–¥—ã, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–µ—Ä–µ–≤–∞)
    const effectiveSkillNodes = skillNodes.length > 0
      ? skillNodes
      : (apiTree.skills || []).map(skill => ({
          id: skill.documentId,
          type: 'skill' as const,
          data: {
            label: skill.title,
            thumbnail: skill.image && typeof skill.image === 'object' ? skill.image.url : undefined,
            guideCount: skill.guides?.length || 0,
          },
          position: skill.position || { x: 0, y: 0 },
        }));

    console.log('üîç effectiveSkillNodes:', effectiveSkillNodes.length);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞
    const skills: SkillPublishData[] = effectiveSkillNodes.map(node => {
      const existingSkill = apiTree.skills?.find(s => s.documentId === node.id);

      // –ü–µ—Ä–µ–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ base64 (–Ω–æ–≤–æ–µ –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
      // –ï—Å–ª–∏ —ç—Ç–æ URL (http/https), –∑–Ω–∞—á–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å - –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ
      const thumbnail = node.data.thumbnail as string | undefined;
      const isBase64 = thumbnail && thumbnail.startsWith('data:image');

      const skillData: SkillPublishData = {
        documentId: existingSkill ? node.id : undefined,
        tempId: existingSkill ? undefined : node.id,
        title: node.data.label as string,
        position: node.position,
        image: isBase64 ? thumbnail : undefined, // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ base64
      };

      return skillData;
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞)
    const currentSkillIds = new Set(effectiveSkillNodes.map(n => n.id));
    const deletedSkills = skillNodes.length > 0
      ? (apiTree.skills?.filter(s => !currentSkillIds.has(s.documentId)).map(s => s.documentId) || [])
      : []; // –ï—Å–ª–∏ –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –≥–∞–π–¥—ã, –Ω–µ —É–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫–∏

    console.log('üîç currentSkillIds:', Array.from(currentSkillIds));
    console.log('üîç deletedSkills:', deletedSkills);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏
    const skillEdges = localEdges.map((edge: Edge) => ({
      id: edge.id,
      source: edge.source,
      target: edge.target,
      type: edge.type,
    }));

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≥–∞–π–¥–æ–≤ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω skillId)
    let guides: GuidePublishData[] = [];
    // –ú–∞–ø–ø–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö ID –Ω–æ–¥ (node.id) –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ documentId (node.data.guideId)
    const nodeIdToGuideDocId = new Map<string, string>();

    console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–∞–π–¥–æ–≤:');
    console.log('üìä skillId:', skillId);
    console.log('üìä skillGuideNodes:', skillGuideNodes?.length);
    console.log('üìä skillGuideEdges:', skillGuideEdges?.length);

    if (skillId && skillGuideNodes) {
      console.log('üìä –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∞–π–¥–æ–≤ –¥–ª—è –Ω–∞–≤—ã–∫–∞:', skillId);
      console.log('üìä –í—Å–µ–≥–æ guideNodes:', skillGuideNodes.length);

      const guideNodes = skillGuideNodes.filter(node => node.type === 'guide');
      const existingSkill = apiTree.skills?.find(s => s.documentId === skillId);

      console.log('üìä –ì–∞–π–¥—ã –Ω–∞–≤—ã–∫–∞ –∏–∑ API:', existingSkill?.guides?.map(g => ({ id: g.documentId, title: g.title })));
      console.log('üìä –í—Å–µ–≥–æ –≥–∞–π–¥–æ–≤ –≤ API:', existingSkill?.guides?.length);

      guides = guideNodes.map(node => {
        // node.data.guideId —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π documentId –∏–∑ Strapi (–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –Ω–æ–≤—ã—Ö –≥–∞–π–¥–æ–≤)
        const guideDocId = node.data.guideId as string;
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–¥—ã ${node.id}:`);
        console.log(`   - node.data:`, node.data);
        console.log(`   - guideDocId: ${guideDocId}`);
        console.log(`   - title: ${node.data.title}`);

        const existingGuide = existingSkill?.guides?.find(g => g.documentId === guideDocId);
        console.log(`   - existingGuide: ${existingGuide ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω'}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ node.id -> guideDocId
        nodeIdToGuideDocId.set(node.id, guideDocId);

        // –ü–µ—Ä–µ–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ base64
        const thumbnail = node.data.thumbnail as string | undefined;
        const isBase64 = thumbnail && thumbnail.startsWith('data:image');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π –≥–∞–π–¥ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        // –ù–æ–≤—ã–µ –≥–∞–π–¥—ã –∏–º–µ—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ "guide-{skillId}-{timestamp}" (—Å—Ç—Ä–æ–∫–∞)
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–∞–π–¥—ã –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞ –∏–º–µ—é—Ç guideDocId –∫–∞–∫ numeric ID (—á–∏—Å–ª–æ)
        const isNewGuide = typeof guideDocId === 'string' && guideDocId.startsWith('guide-');

        const guideData = {
          id: !isNewGuide && typeof guideDocId === 'number' ? guideDocId : undefined, // Numeric ID –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
          documentId: existingGuide ? existingGuide.documentId : undefined, // Document ID –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∞–π–¥–æ–≤
          tempId: isNewGuide ? node.id : undefined, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –Ω–æ–≤—ã—Ö –≥–∞–π–¥–æ–≤
          title: node.data.title as string,
          text: node.data.text as string | undefined,
          link: node.data.link as string | undefined,
          image: isBase64 ? thumbnail : undefined,
          skillId: skillId,
        };

        console.log(`   - –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–∞–π–¥–∞:`, guideData);

        return guideData;
      });

      console.log('üìä –í—Å–µ–≥–æ –≥–∞–π–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', guides.length);

      // –î–æ–±–∞–≤–ª—è–µ–º guideEdges –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –Ω–∞–≤—ã–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∏)
      // –ó–∞–º–µ–Ω—è–µ–º node.id –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ documentId –∏–∑ guideId
      if (skillGuideEdges && skillGuideEdges.length > 0) {
        const skillIndex = skills.findIndex(s => s.documentId === skillId || s.tempId === skillId);
        if (skillIndex !== -1) {
          console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ guideEdges –¥–ª—è –Ω–∞–≤—ã–∫–∞:', skillId);
          console.log('üìä –ú–∞–ø–ø–∏–Ω–≥ nodeId -> guideDocId:', Object.fromEntries(nodeIdToGuideDocId));
          console.log('üìä –ò—Å—Ö–æ–¥–Ω—ã–µ edges:', skillGuideEdges.map(e => ({ id: e.id, source: e.source, target: e.target })));

          skills[skillIndex].guideEdges = skillGuideEdges.map((edge: Edge) => {
            const mappedSource = nodeIdToGuideDocId.get(edge.source) || edge.source;
            const mappedTarget = nodeIdToGuideDocId.get(edge.target) || edge.target;

            console.log(`üìä Edge ${edge.id}: ${edge.source} -> ${mappedSource}, ${edge.target} -> ${mappedTarget}`);

            return {
              id: edge.id,
              source: mappedSource,
              target: mappedTarget,
              type: edge.type,
            };
          });

          console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ guideEdges:', skills[skillIndex].guideEdges);
        }
      }
    }

    // –§–ê–ó–ê 2: –û—Ç–ø—Ä–∞–≤–∫–∞ batch –∑–∞–ø—Ä–æ—Å–∞
    onProgress?.({
      phase: 'uploading',
      current: 2,
      total: 3,
      status: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä...',
    });

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
    console.log('üöÄ Skills:', skills.map(s => ({ tempId: s.tempId, documentId: s.documentId, title: s.title })));
    console.log('üöÄ SkillEdges:', skillEdges);
    console.log('üöÄ DeletedSkills:', deletedSkills);
    console.log('üöÄ Guides:', guides.map(g => ({ tempId: g.tempId, documentId: g.documentId, title: g.title, skillId: g.skillId })));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π id –¥–ª—è Strapi endpoint
    const numericId = apiTree.id;

    const payload = {
      skills,
      skillEdges,
      deletedSkills,
      guides,
    };

    console.log('üöÄ –ü–æ–ª–Ω—ã–π payload:', JSON.stringify(payload, null, 2));

    const response = await fetch(`/api/skill-trees/${numericId}/publish`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error?.message || '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }

    const result = await response.json();

    // –§–ê–ó–ê 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    onProgress?.({
      phase: 'complete',
      current: 3,
      total: 3,
      status: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
    });

    return {
      success: true,
      tree: result.data,
      skillIdMap: result.meta?.skillIdMap,
      guideIdMap: result.meta?.guideIdMap,
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
 */
export async function checkPublishConflicts(
  treeId: string,
  localUpdatedAt: string
): Promise<boolean> {
  try {
    const serverTree = await skillTreeAPI.getSkillTree(treeId);
    return serverTree.updatedAt === localUpdatedAt;
  } catch {
    return false;
  }
}
