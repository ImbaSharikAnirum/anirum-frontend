"use client"

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–±–∞—Ç—á–∏–Ω–≥)
 * @layer entities/invoice
 */

import { useState, useCallback, useMemo, useEffect, useRef } from 'react'
import { invoiceAPI, type AttendanceRecord, type AttendanceStatus, type Invoice } from '../api/invoiceApi'
import { useUser } from '@/entities/user'

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è debounce –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function debounce<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void {
  let timeoutId: NodeJS.Timeout
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId)
    timeoutId = setTimeout(() => func(...args), delay)
  }
}

interface AttendanceManagerState {
  // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  attendance: Record<string, AttendanceRecord> // invoiceId -> { date -> status }
  // Pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
  pendingUpdates: Record<string, AttendanceRecord>
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  isUpdating: boolean
  errors: Record<string, string> // invoiceId -> error message
}

interface UseAttendanceManagerOptions {
  invoices: Invoice[]
}

export function useAttendanceManager({ invoices }: UseAttendanceManagerOptions) {
  const { user, token } = useUser()
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö invoices —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  const [state, setState] = useState<AttendanceManagerState>(() => ({
    attendance: invoices.reduce((acc, invoice) => {
      acc[invoice.documentId] = invoice.attendance || {}
      return acc
    }, {} as Record<string, AttendanceRecord>),
    pendingUpdates: {},
    isUpdating: false,
    errors: {}
  }))

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ invoices (—Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
  useEffect(() => {
    setState(prev => ({
      ...prev,
      attendance: invoices.reduce((acc, invoice) => {
        const existingAttendance = prev.attendance[invoice.documentId] || {}
        
        // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –º–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç pending –∏–∑–º–µ–Ω–µ–Ω–∏–π
        // –ï—Å–ª–∏ –µ—Å—Ç—å pending - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        if (prev.pendingUpdates[invoice.documentId] && Object.keys(prev.pendingUpdates[invoice.documentId]).length > 0) {
          acc[invoice.documentId] = existingAttendance
        } else {
          // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ—Ç pending –∏–∑–º–µ–Ω–µ–Ω–∏–π
          acc[invoice.documentId] = {
            ...(invoice.attendance || {}),
            ...existingAttendance
          }
        }
        return acc
      }, {} as Record<string, AttendanceRecord>)
    }))
  }, [invoices])
  
  // Ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è pending updates –¥–ª—è debounce
  const batchRef = useRef<Record<string, AttendanceRecord>>({})

  // Debounced —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const debouncedBatchSave = useMemo(
    () => debounce(async () => {
      if (!token) {
        return
      }
      
      if (Object.keys(batchRef.current).length === 0) {
        return
      }

      const batch = { ...batchRef.current }

      try {
        setState(prev => ({ ...prev, isUpdating: true, errors: {} }))

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race conditions
        const results = []
        for (const [invoiceId, newAttendance] of Object.entries(batch)) {
          // –ú–µ—Ä–∂–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          const originalInvoice = invoices.find(inv => inv.documentId === invoiceId)
          const existingAttendance = originalInvoice?.attendance || {}
          
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
          const mergedAttendance = {
            ...existingAttendance,
            ...newAttendance
          }
          
          try {
            const result = await invoiceAPI.updateAttendance(invoiceId, mergedAttendance, token)
            results.push({ status: 'fulfilled', value: result })
          } catch (error) {
            results.push({ status: 'rejected', reason: error, invoiceId })
          }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        const errors: Record<string, string> = {}
        results.forEach((result) => {
          if (result.status === 'rejected' && result.invoiceId) {
            const invoiceId = result.invoiceId
            errors[invoiceId] = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
            
            // Rollback –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            const originalInvoice = invoices.find(inv => inv.documentId === invoiceId)
            setState(prev => ({
              ...prev,
              attendance: {
                ...prev.attendance,
                [invoiceId]: originalInvoice?.attendance || {}
              }
            }))
          }
        })

        // –û—á–∏—â–∞–µ–º batchRef —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        batchRef.current = {}
        
        setState(prev => ({
          ...prev,
          pendingUpdates: {},
          errors,
          isUpdating: false
        }))

      } catch (err) {
        setState(prev => ({
          ...prev,
          isUpdating: false,
          errors: Object.keys(batch).reduce((acc, invoiceId) => {
            acc[invoiceId] = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
            return acc
          }, {} as Record<string, string>)
        }))
      }
    }, 1000), // 1000ms debounce –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞—Ç—á–∏–Ω–≥–∞
    [token, invoices]
  )

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
  const updateAttendance = useCallback((
    invoiceId: string,
    date: string,
    status: AttendanceStatus
  ) => {
    // üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ optimistic –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setState(prev => ({
      ...prev,
      attendance: {
        ...prev.attendance,
        [invoiceId]: {
          ...prev.attendance[invoiceId],
          [date]: status
        }
      },
      pendingUpdates: {
        ...prev.pendingUpdates,
        [invoiceId]: {
          ...prev.pendingUpdates[invoiceId],
          [date]: status
        }
      },
      errors: {
        ...prev.errors,
        [invoiceId]: '' // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É
      }
    }))

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ—Ä–∂–∏–º!
    if (!batchRef.current[invoiceId]) {
      batchRef.current[invoiceId] = {}
    }
    // –ú–µ—Ä–∂–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ pending –∏–∑–º–µ–Ω–µ–Ω–∏—è + –Ω–æ–≤–æ–µ
    batchRef.current[invoiceId] = {
      ...batchRef.current[invoiceId],
      [date]: status
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º debounced batch save
    debouncedBatchSave()
  }, [debouncedBatchSave])

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –¥–∞—Ç—ã
  const getAttendanceStatus = useCallback((
    invoiceId: string,
    date: string
  ): AttendanceStatus => {
    return state.attendance[invoiceId]?.[date] || 'unknown'
  }, [state.attendance])

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º UI!)
  const isPending = useCallback((
    invoiceId: string,
    date: string
  ): boolean => {
    // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loading —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –†–ï–ê–õ–¨–ù–û –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å
    // –∞ –Ω–µ –∫–æ–≥–¥–∞ –∂–¥–µ–º debounce
    return state.isUpdating && Boolean(state.pendingUpdates[invoiceId]?.[date])
  }, [state.pendingUpdates, state.isUpdating])

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  const hasError = useCallback((invoiceId: string): boolean => {
    return Boolean(state.errors[invoiceId])
  }, [state.errors])

  // –ü–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  const getError = useCallback((invoiceId: string): string | null => {
    return state.errors[invoiceId] || null
  }, [state.errors])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (Object.keys(batchRef.current).length > 0) {
        e.preventDefault()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch —á–µ—Ä–µ–∑ sendBeacon
        const data = JSON.stringify(batchRef.current)
        Object.entries(batchRef.current).forEach(([invoiceId, attendance]) => {
          navigator.sendBeacon(
            `${process.env.NEXT_PUBLIC_API_URL}/invoices/${invoiceId}`,
            JSON.stringify({ data: { attendance } })
          )
        })
      }
    }

    window.addEventListener('beforeunload', handleBeforeUnload)
    return () => window.removeEventListener('beforeunload', handleBeforeUnload)
  }, [])

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    updateAttendance,
    getAttendanceStatus,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è UI
    isPending,
    hasError,
    getError,
    isUpdating: state.isUpdating,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    totalPendingUpdates: Object.keys(state.pendingUpdates).length,
    hasPendingUpdates: Object.keys(state.pendingUpdates).length > 0
  }
}