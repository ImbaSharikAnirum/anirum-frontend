'use client'

/**
 * –í–∏–¥–∂–µ—Ç –ø–æ–∏—Å–∫–∞ –≥–∞–π–¥–æ–≤ –≤ —Å—Ç–∏–ª–µ Pinterest
 * @layer widgets
 */

import { useState, useRef, useEffect } from 'react'
import { Command, CommandList, CommandEmpty, CommandGroup, CommandItem } from "@/components/ui/command"
import { Input } from "@/components/ui/input"
import { Clock, Bookmark, FileText, Search, X, Link2, Image, TrendingUp, PlusCircle, Download } from "lucide-react"
import { usePinterestActions } from '@/shared/hooks'
import { useGalleryView } from '@/shared/contexts/GalleryViewContext'
import type { User } from '@/entities/user/model/types'

interface PinterestStatus {
  isConnected: boolean
  username?: string
}

interface GuidesSearchProps {
  user?: User | null
  pinterestStatus?: PinterestStatus | null | undefined
}

export function GuidesSearch({ user, pinterestStatus }: GuidesSearchProps) {
  // Gallery view context - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π query
  const { switchToSearch, switchToPopular, searchQuery } = useGalleryView()

  // üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑ sessionStorage)
  const [open, setOpen] = useState(false)
  const [value, setValue] = useState(searchQuery || "")
  const [recentSearches, setRecentSearches] = useState<string[]>([])
  const inputRef = useRef<HTMLInputElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)

  // üîß –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º value —Å searchQuery –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (searchQuery && searchQuery !== value) {
      console.log('üîÑ Restoring search query:', searchQuery)
      setValue(searchQuery)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchQuery])

  // Pinterest actions hook
  const { handleSearchAction, getQuickActions } = usePinterestActions({
    user,
    initialPinterestStatus: pinterestStatus || null
  })

  // –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
  const quickActions = getQuickActions().map(action => ({
    icon: action.icon === 'TrendingUp' ? TrendingUp :
          action.icon === 'Bookmark' ? Bookmark :
          action.icon === 'FileText' ? FileText :
          action.icon === 'Image' ? Image :
          action.icon === 'Link2' ? Link2 :
          action.icon === 'PlusCircle' ? PlusCircle :
          action.icon === 'Download' ? Download : Bookmark,
    label: action.label,
    action: action.action
  }))

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const stored = localStorage.getItem('guides-recent-searches')
    if (stored) {
      try {
        const parsed = JSON.parse(stored)
        if (Array.isArray(parsed)) {
          setRecentSearches(parsed)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤:', error)
      }
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤ –≤ localStorage
  const saveRecentSearches = (searches: string[]) => {
    try {
      localStorage.setItem('guides-recent-searches', JSON.stringify(searches))
      setRecentSearches(searches)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤:', error)
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
  const addToRecentSearches = (searchTerm: string) => {
    if (!searchTerm.trim()) return

    const newSearches = [
      searchTerm,
      ...recentSearches.filter(s => s !== searchTerm) // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    ].slice(0, 3) // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    saveRecentSearches(newSearches)
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
  const filteredSearches = recentSearches.filter(search =>
    search.toLowerCase().includes(value.toLowerCase())
  )

  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        setOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // üîç Debounce: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ 600–º—Å –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—á–∞—Ç–∏ (–±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞)
  useEffect(() => {
    // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≥–∞–π–¥–∞–º –ë–ï–ó —Å–∫—Ä–æ–ª–ª–∞
    if (!value.trim()) {
      const timeoutId = setTimeout(() => {
        console.log('üîÑ Search cleared, returning to popular (no scroll)')
        switchToPopular(false) // false = –Ω–µ —Å–∫—Ä–æ–ª–ª–∏—Ç—å
      }, 300)
      return () => clearTimeout(timeoutId)
    }

    const timeoutId = setTimeout(() => {
      console.log('ü§ñ AI Auto-search triggered:', value)
      addToRecentSearches(value.trim())
      switchToSearch(value.trim(), [], false) // false = –Ω–µ —Å–∫—Ä–æ–ª–ª–∏—Ç—å –ø—Ä–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–µ
    }, 600) // 600–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å
    return () => clearTimeout(timeoutId)
  }, [value, switchToSearch, switchToPopular])

  const handleInputFocus = () => {
    setOpen(true)
  }

  const handleInputClick = () => {
    setOpen(true)
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º input
    setTimeout(() => {
      inputRef.current?.focus()
    }, 0)
  }

  const handleSelect = (selectedValue: string) => {
    setValue(selectedValue)
    setOpen(false)
    inputRef.current?.blur()

    // –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ë–ï–ó —Å–∫—Ä–æ–ª–ª–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥–∞–π–¥–æ–≤)
    console.log('–ü–æ–∏—Å–∫:', selectedValue)
    switchToSearch(selectedValue, [], false)
  }

  const handleActionSelect = (action: string) => {
    setOpen(false)
    inputRef.current?.blur()
    handleSearchAction(action)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && value.trim()) {
      addToRecentSearches(value.trim())
      setOpen(false)
      inputRef.current?.blur()
      console.log('–ü–æ–∏—Å–∫ –ø–æ Enter:', value.trim())
      switchToSearch(value.trim(), [], false) // false = –Ω–µ —Å–∫—Ä–æ–ª–ª–∏—Ç—å (—É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
  const handleBlur = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤–µ–ª
    if (value.trim()) {
      addToRecentSearches(value.trim())
    }
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
    setTimeout(() => setOpen(false), 150)
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
  const handleClear = () => {
    setValue("")
    setOpen(false)
    inputRef.current?.blur()
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  const removeFromRecentSearches = (searchToRemove: string) => {
    const updatedSearches = recentSearches.filter(search => search !== searchToRemove)
    saveRecentSearches(updatedSearches)
  }

  return (
    <div className="w-full relative" ref={containerRef}>
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
        <Input
          ref={inputRef}
          placeholder="–ü–æ–∏—Å–∫ –≥–∞–π–¥–æ–≤..."
          value={value}
          onChange={(e) => setValue(e.target.value)}
          onFocus={handleInputFocus}
          onClick={handleInputClick}
          onKeyDown={handleKeyDown}
          onBlur={handleBlur}
          className="pl-9 pr-10 rounded-full border-2 focus:border-blue-500 focus:ring-0"
        />
        {/* –ö—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç */}
        {value && (
          <button
            onClick={handleClear}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground hover:text-foreground transition-colors"
            type="button"
          >
            <X className="h-4 w-4" />
          </button>
        )}
      </div>

      {/* Dropdown */}
      {open && (
        <div className="absolute z-50 w-full mt-2 bg-popover text-popover-foreground rounded-md border shadow-md">
          <Command shouldFilter={false}>
            <CommandList className="max-h-[300px] text-left">
              <CommandEmpty>
                {value ? `–ü–æ–∏—Å–∫ "${value}"` : "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞"}
              </CommandEmpty>

              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ */}
              {recentSearches.length > 0 && (filteredSearches.length > 0 || !value) && (
                <CommandGroup heading="–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã">
                  {(value ? filteredSearches : recentSearches.slice(0, 3)).map((search) => (
                    <CommandItem
                      key={search}
                      value={search}
                      onSelect={() => handleSelect(search)}
                      className="flex items-center gap-2 py-2 group"
                    >
                      <Clock className="h-4 w-4 text-muted-foreground" />
                      <span className="flex-1">{search}</span>
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          removeFromRecentSearches(search)
                        }}
                        className="opacity-0 group-hover:opacity-100 p-1 hover:bg-accent rounded transition-all"
                        type="button"
                      >
                        <X className="h-3 w-3 text-muted-foreground hover:text-foreground" />
                      </button>
                    </CommandItem>
                  ))}
                </CommandGroup>
              )}

              {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ */}
              {!value && (
                <CommandGroup heading="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ">
                  {quickActions.map((item) => {
                    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ - —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    if (item.action.startsWith('header-')) {
                      return (
                        <div
                          key={item.action}
                          className="px-2 py-1.5 text-xs font-semibold text-muted-foreground"
                        >
                          {item.label}
                        </div>
                      )
                    }

                    return (
                      <CommandItem
                        key={item.action}
                        value={item.label}
                        onSelect={() => handleActionSelect(item.action)}
                        className="flex items-center gap-2 py-2"
                      >
                        <item.icon className="h-4 w-4 text-muted-foreground" />
                        <span>{item.label}</span>
                      </CommandItem>
                    )
                  })}
                </CommandGroup>
              )}

              {/* –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–ø—Ü–∏—é */}
              {value && (
                <CommandGroup heading="–ü–æ–∏—Å–∫">
                  <CommandItem
                    value={value}
                    onSelect={() => handleSelect(value)}
                    className="flex items-center gap-2 py-2"
                  >
                    <Search className="h-4 w-4 text-muted-foreground" />
                    <span>–ò—Å–∫–∞—Ç—å "{value}"</span>
                  </CommandItem>
                </CommandGroup>
              )}
            </CommandList>
          </Command>
        </div>
      )}
    </div>
  )
}