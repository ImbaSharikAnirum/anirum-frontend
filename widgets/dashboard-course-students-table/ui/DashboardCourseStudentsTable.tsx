"use client";

import React, { useEffect, useState } from "react";
import {
  invoiceAPI,
  type Invoice,
  type AttendanceStatus,
  useAttendanceManager,
} from "@/entities/invoice";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Calendar,
  CheckCircle,
  XCircle,
  CreditCard,
  ChevronDown,
  ChevronRight,
  Info,
  Copy,
  Users,
  MessageSquare,
  CalendarDays,
} from "lucide-react";
import {
  generateCourseDates,
  formatAttendanceDate,
} from "@/shared/lib/attendance-utils";
import { StudentActionsDropdown } from "@/shared/ui/student-actions-dropdown";
import { StudentAttendanceCell } from "./StudentAttendanceCell";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { toast } from "sonner";
import type { Course } from "@/entities/course";

type UserRole = "Manager" | "Teacher";

interface DashboardCourseStudentsTableProps {
  course: Course | null;
  month?: number;
  year?: number;
  className?: string;
  onStudentDeleted?: () => void;
  role?: UserRole;
}

export function DashboardCourseStudentsTable({
  course,
  month,
  year,
  className,
  onStudentDeleted,
  role = "Manager",
}: DashboardCourseStudentsTableProps) {
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isBulkSending, setIsBulkSending] = useState(false);
  const [isBulkDialogOpen, setIsBulkDialogOpen] = useState(false);
  const [bulkResults, setBulkResults] = useState<any>(null);
  const [isResultsDialogOpen, setIsResultsDialogOpen] = useState(false);
  const [isCopyingToNextMonth, setIsCopyingToNextMonth] = useState(false);
  const [isCopyDialogOpen, setIsCopyDialogOpen] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º attendance manager –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
  const attendanceManager = useAttendanceManager({ invoices });

  const loadInvoices = async () => {
    if (!course) {
      setInvoices([]);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      const response = await invoiceAPI.getCourseInvoices(course.documentId, {
        month,
        year,
      });

      // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è)
      const sortedInvoices = response.sort((a, b) => {
        const fullNameA = `${a.family || ""} ${a.name || ""}`.trim();
        const fullNameB = `${b.family || ""} ${b.name || ""}`.trim();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Intl.Collator –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        return new Intl.Collator(["ru", "en"], {
          sensitivity: "base",
          numeric: true,
          ignorePunctuation: true,
        }).compare(fullNameA, fullNameB);
      });

      setInvoices(sortedInvoices);

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ populate
      console.log("üìä Invoices loaded:", {
        count: sortedInvoices.length,
        sample: sortedInvoices[0],
        ownersInfo: sortedInvoices.map((inv) => ({
          name: `${inv.name} ${inv.family}`,
          hasOwner: !!inv.owner,
          whatsappVerified: inv.owner?.whatsapp_phone_verified,
          telegramVerified: inv.owner?.telegram_phone_verified,
          telegramChatId: inv.owner?.telegram_chat_id,
        })),
      });
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
      );
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadInvoices();
  }, [course, month, year]);

  const handleStudentDeleted = () => {
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    loadInvoices();
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    onStudentDeleted?.();
  };

  const handleCopyStudentsList = async () => {
    if (!course || invoices.length === 0) {
      toast.error("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    const teacherInfo = course.teacher
      ? `${course.teacher.name || ""} ${course.teacher.family || ""}`.trim()
      : "–ù–µ —É–∫–∞–∑–∞–Ω";

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–≤—ã–º
    const peopleList = [
      `1. ${teacherInfo} (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)`,
      ...invoices.map(
        (invoice, index) => `${index + 2}. ${invoice.name} ${invoice.family}`
      ),
    ].join("\n");

    const message = peopleList;

    try {
      await navigator.clipboard.writeText(message);
      toast.success("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω");
    } catch (err) {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement("textarea");
      textArea.value = message;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand("copy");
      document.body.removeChild(textArea);
      toast.success("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω");
    }
  };

  const handleBulkSendPaymentMessages = async () => {
    if (!course) {
      toast.error("–ö—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω");
      return;
    }

    if (invoices.length === 0) {
      toast.error("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π");
      return;
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    const studentsWithContacts = invoices.filter(
      (invoice) =>
        invoice.owner &&
        ((invoice.owner.whatsapp_phone_verified &&
          invoice.owner.whatsapp_phone) ||
          (invoice.owner.telegram_phone_verified &&
            invoice.owner.telegram_chat_id))
    );

    if (studentsWithContacts.length === 0) {
      toast.error("–£ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö");
      return;
    }

    setIsBulkSending(true);
    setIsBulkDialogOpen(false);

    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É:`, {
        courseId: course.documentId,
        month,
        year,
        monthType: typeof month,
        yearType: typeof year
      });

      const response = await invoiceAPI.bulkSendPaymentMessages({
        courseId: course.documentId,
        month,
        year,
      });

      if (response.success) {
        setBulkResults(response.results);
        setIsResultsDialogOpen(true);

        toast.success(
          `–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${response.results.sent} –∏–∑ ${response.results.total} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`,
          {
            description:
              response.results.failed > 0
                ? `${response.results.failed} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π`
                : "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            action: {
              label: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
              onClick: () => setIsResultsDialogOpen(true),
            },
          }
        );
      } else {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      toast.error(
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
      );
    } finally {
      setIsBulkSending(false);
    }
  };

  const handleCopyToNextMonth = async () => {
    if (!course) {
      toast.error("–ö—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω");
      return;
    }

    if (invoices.length === 0) {
      toast.error("–ù–µ—Ç —Å—á–µ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }

    const currentDate = new Date();
    const currentYear = year || currentDate.getFullYear();
    const currentMonth = month || (currentDate.getMonth() + 1);

    setIsCopyingToNextMonth(true);
    setIsCopyDialogOpen(false);

    try {
      const response = await invoiceAPI.copyInvoicesToNextMonth({
        courseId: course.documentId,
        currentMonth,
        currentYear,
      });

      if (response.success) {
        toast.success(
          `–£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${response.results.copiedCount} –∏–∑ ${response.results.originalCount} —Å—á–µ—Ç–æ–≤ –Ω–∞ ${response.results.nextMonth}/${response.results.nextYear}`,
          {
            description: response.results.copiedCount < response.results.originalCount
              ? `${response.results.originalCount - response.results.copiedCount} —Å—á–µ—Ç–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏`
              : `–°—É–º–º–∞: ${response.results.monthlySum} ${response.results.currency} (${response.results.lessonsCount} –∑–∞–Ω—è—Ç–∏–π √ó ${response.results.pricePerLesson})`
          }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        const nextMonth = response.results.nextMonth;
        const nextYear = response.results.nextYear;
        if (month === nextMonth && year === nextYear) {
          loadInvoices();
        }
      } else {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–æ–≤");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤:", error);
      toast.error(error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–æ–≤");
    } finally {
      setIsCopyingToNextMonth(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  const formatDateTime = (dateTimeString: string) => {
    return new Date(dateTimeString).toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const getPaymentStatusBadge = (invoice: Invoice) => {
    if (invoice.statusPayment) {
      return (
        <Badge variant="default" className="bg-green-100 text-green-800">
          <CheckCircle className="h-3 w-3 mr-1" />
          –û–ø–ª–∞—á–µ–Ω
        </Badge>
      );
    }
    return (
      <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">
        <XCircle className="h-3 w-3 mr-1" />
        –ù–µ –æ–ø–ª–∞—á–µ–Ω
      </Badge>
    );
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
  const courseDates = course
    ? (() => {
        const currentDate = new Date();
        const targetYear = year || currentDate.getFullYear();
        const targetMonth = month || currentDate.getMonth() + 1;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        const monthStart = new Date(targetYear, targetMonth - 1, 1);
        const monthEnd = new Date(targetYear, targetMonth, 0);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä—Å–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        const courseStart = new Date(course.startDate);
        const courseEnd = new Date(course.endDate);

        // –ë–µ—Ä–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º –∏–∑ –Ω–∞—á–∞–ª –∏ –º–∏–Ω–∏–º—É–º –∏–∑ –∫–æ–Ω—Ü–æ–≤
        const effectiveStart = new Date(
          Math.max(monthStart.getTime(), courseStart.getTime())
        );
        const effectiveEnd = new Date(
          Math.min(monthEnd.getTime(), courseEnd.getTime())
        );

        // –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Å—è—Ü–µ–º
        if (effectiveStart > effectiveEnd) {
          return [];
        }

        return generateCourseDates(
          effectiveStart.toISOString().split("T")[0],
          effectiveEnd.toISOString().split("T")[0],
          course.weekdays
        );
      })()
    : [];

  // –õ–æ–≥–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ StudentAttendanceCell

  if (!course) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>–°—Ç—É–¥–µ–Ω—Ç—ã –∫—É—Ä—Å–∞</CardTitle>
          <CardDescription>
            –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –≤ —Ç–∞–±–ª–∏—Ü–µ –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
          </CardDescription>
        </CardHeader>
      </Card>
    );
  }

  if (isLoading) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>–°—Ç—É–¥–µ–Ω—Ç—ã –∫—É—Ä—Å–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center p-8">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
              <p className="mt-2 text-sm text-gray-600">
                –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>–°—Ç—É–¥–µ–Ω—Ç—ã –∫—É—Ä—Å–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center p-8">
            <p className="text-red-600">{error}</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  // –†–∞—Å—á–µ—Ç—ã –¥–æ—Ö–æ–¥–æ–≤
  const totalSum = invoices.reduce((sum, invoice) => sum + invoice.sum, 0);
  const paidSum = invoices
    .filter((invoice) => invoice.statusPayment)
    .reduce((sum, invoice) => sum + invoice.sum, 0);
  const paidCount = invoices.filter((invoice) => invoice.statusPayment).length;

  // –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∫–∞–∫ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
  const taxAndCommissionRate = 10; // 6% –Ω–∞–ª–æ–≥–∏ + 4% –±–∞–Ω–∫
  const teacherShare = 0.7; // 70% –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
  const companyShare = 0.3; // 30% –∫–æ–º–ø–∞–Ω–∏–∏

  const calculateTeacherIncome = (
    grossIncome: number,
    rentTotal: number = 0
  ) => {
    const taxAndCommission = Math.round(
      grossIncome * (taxAndCommissionRate / 100)
    );
    const afterTax = grossIncome - taxAndCommission;
    const net = afterTax - rentTotal;
    const result = Math.max(0, Math.round(net * teacherShare));

    return result;
  };

  const calculateCompanyProfit = (
    grossIncome: number,
    rentTotal: number = 0
  ) => {
    const taxAndCommission = Math.round(
      grossIncome * (taxAndCommissionRate / 100)
    );
    const afterTax = grossIncome - taxAndCommission;
    const net = afterTax - rentTotal;
    return Math.max(0, Math.round(net * companyShare));
  };

  // –†–∞—Å—á–µ—Ç—ã –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  const rentPerLesson = course?.isOnline ? 0 : course?.rentalPrice || 0;
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const actualLessonsCount = courseDates.length;
  const rentTotal = rentPerLesson * actualLessonsCount;

  // –û—Ç–ª–∞–¥–∫–∞
  console.log("Course financial data:", {
    isOnline: course?.isOnline,
    rentalPrice: course?.rentalPrice,
    rentPerLesson,
    actualLessonsCount,
    rentTotal,
    paidSum,
    totalSum,
    paidCount,
  });

  // –£—á–∏—Ç—ã–≤–∞–µ–º –∞—Ä–µ–Ω–¥—É –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∫—É—Ä—Å–æ–≤
  const teacherIncomeFromPaid = calculateTeacherIncome(paidSum, rentTotal);
  const teacherIncomeFromTotal = calculateTeacherIncome(totalSum, rentTotal);
  const companyProfitFromPaid = calculateCompanyProfit(paidSum, rentTotal);
  const companyProfitFromTotal = calculateCompanyProfit(totalSum, rentTotal);

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle>–°—Ç—É–¥–µ–Ω—Ç—ã –∫—É—Ä—Å–∞</CardTitle>
        <CardDescription className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <span>
              –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω—ã: {invoices.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–∏:{" "}
              {paidCount} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
              {attendanceManager.isUpdating && " ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è..."}
              {attendanceManager.hasPendingUpdates &&
                " ‚Ä¢ –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
            </span>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ */}
            {invoices.length > 0 && (
              <div className="flex items-center gap-1">
                {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ */}
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleCopyStudentsList}
                      className="h-6 w-6 p-0 hover:bg-gray-100"
                    >
                      <Users className="h-4 w-4 text-gray-900 hover:text-blue-600" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p className="text-white">–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</p>
                  </TooltipContent>
                </Tooltip>

                {/* –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ */}
                {role === "Manager" && (
                  <Dialog
                    open={isBulkDialogOpen}
                    onOpenChange={setIsBulkDialogOpen}
                  >
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <DialogTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            disabled={isBulkSending}
                            className="h-6 w-6 p-0 hover:bg-gray-100"
                          >
                            <MessageSquare className="h-4 w-4 text-gray-900 hover:text-green-600" />
                          </Button>
                        </DialogTrigger>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="text-white">
                          –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–ª–∞—Ç–æ–π –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                        </p>
                      </TooltipContent>
                    </Tooltip>

                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</DialogTitle>
                        <DialogDescription>
                          –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å
                          –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫—É—Ä—Å–∞?
                        </DialogDescription>
                      </DialogHeader>

                      <div className="py-4">
                        <div className="space-y-2 text-sm">
                          <p>
                            <strong>–ö—É—Ä—Å:</strong> {course.direction}
                          </p>
                          <p>
                            <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</strong> {month || '–Ω–µ —É–∫–∞–∑–∞–Ω'}/{year || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
                          </p>
                          <p>
                            <strong>–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</strong> {invoices.length}
                          </p>
                          <p>
                            <strong>–° –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:</strong>{" "}
                            {
                              invoices.filter(
                                (invoice) =>
                                  invoice.owner &&
                                  ((invoice.owner.whatsapp_phone_verified &&
                                    invoice.owner.whatsapp_phone) ||
                                    (invoice.owner.telegram_phone_verified &&
                                      invoice.owner.telegram_chat_id))
                              ).length
                            }
                          </p>
                        </div>

                        <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                          <p className="text-sm text-yellow-800">
                            <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç
                            –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
                            –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ WhatsApp –∏–ª–∏ Telegram.
                            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è WhatsApp.
                          </p>
                        </div>
                      </div>

                      <DialogFooter>
                        <Button
                          variant="outline"
                          onClick={() => setIsBulkDialogOpen(false)}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                          onClick={handleBulkSendPaymentMessages}
                          disabled={isBulkSending}
                        >
                          {isBulkSending
                            ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..."
                            : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"}
                        </Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü - —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ */}
                {role === "Manager" && (
                  <Dialog open={isCopyDialogOpen} onOpenChange={setIsCopyDialogOpen}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <DialogTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            disabled={isCopyingToNextMonth}
                            className="h-6 w-6 p-0 hover:bg-gray-100"
                          >
                            <CalendarDays className="h-4 w-4 text-gray-900 hover:text-blue-600" />
                          </Button>
                        </DialogTrigger>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="text-white">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü</p>
                      </TooltipContent>
                    </Tooltip>

                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü</DialogTitle>
                        <DialogDescription>
                          –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Å—á–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü —Å —É—á–µ—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞?
                        </DialogDescription>
                      </DialogHeader>

                      <div className="py-4">
                        <div className="space-y-2 text-sm">
                          <p><strong>–ö—É—Ä—Å:</strong> {course.direction}</p>
                          <p><strong>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:</strong> {month || new Date().getMonth() + 1}/{year || new Date().getFullYear()}</p>
                          <p><strong>–ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥:</strong> {
                            (() => {
                              const currentMonth = month || new Date().getMonth() + 1;
                              const currentYear = year || new Date().getFullYear();
                              let nextMonth = currentMonth + 1;
                              let nextYear = currentYear;
                              if (nextMonth > 12) {
                                nextMonth = 1;
                                nextYear += 1;
                              }
                              return `${nextMonth}/${nextYear}`;
                            })()
                          }</p>
                          <p><strong>–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {invoices.length}</p>
                          <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∑–∞–Ω—è—Ç–∏–µ:</strong> {course.pricePerLesson} {course.currency}</p>
                          {course.weekdays && (
                            <p><strong>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</strong> {
                              course.weekdays.map(day => {
                                const dayNames: Record<string, string> = {
                                  monday: '–ü–Ω', tuesday: '–í—Ç', wednesday: '–°—Ä',
                                  thursday: '–ß—Ç', friday: '–ü—Ç', saturday: '–°–±', sunday: '–í—Å'
                                };
                                return dayNames[day] || day;
                              }).join(', ')
                            }</p>
                          )}
                        </div>

                        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
                          <p className="text-sm text-blue-800">
                            <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞,
                            —É—á–∏—Ç—ã–≤–∞—é—â–∏–º–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∫—É—Ä—Å–∞. –°—É–º–º–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–∞–∫: —Å—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞_–∑–∞–Ω—è—Ç–∏–µ √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–Ω—è—Ç–∏–π_–≤_–º–µ—Å—è—Ü–µ.
                            –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –±—É–¥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è.
                          </p>
                        </div>
                      </div>

                      <DialogFooter>
                        <Button
                          variant="outline"
                          onClick={() => setIsCopyDialogOpen(false)}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                          onClick={handleCopyToNextMonth}
                          disabled={isCopyingToNextMonth}
                        >
                          {isCopyingToNextMonth ? "–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è..." : "–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç–∞"}
                        </Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                )}
              </div>
            )}

            {/* Dialog —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            {bulkResults && (
              <Dialog
                open={isResultsDialogOpen}
                onOpenChange={setIsResultsDialogOpen}
              >
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏</DialogTitle>
                    <DialogDescription>
                      –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                      —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                    </DialogDescription>
                  </DialogHeader>

                  <div className="py-4">
                    {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div className="text-center p-3 bg-blue-50 rounded-lg">
                        <div className="text-2xl font-bold text-blue-600">
                          {bulkResults.total}
                        </div>
                        <div className="text-sm text-blue-800">
                          –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                        </div>
                      </div>
                      <div className="text-center p-3 bg-green-50 rounded-lg">
                        <div className="text-2xl font-bold text-green-600">
                          {bulkResults.sent}
                        </div>
                        <div className="text-sm text-green-800">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>
                      </div>
                      <div className="text-center p-3 bg-red-50 rounded-lg">
                        <div className="text-2xl font-bold text-red-600">
                          {bulkResults.failed}
                        </div>
                        <div className="text-sm text-red-800">–û—à–∏–±–æ–∫</div>
                      </div>
                    </div>

                    {/* –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ */}
                    <div className="max-h-80 overflow-y-auto">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>–°—Ç—É–¥–µ–Ω—Ç</TableHead>
                            <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                            <TableHead>–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</TableHead>
                            <TableHead>–û—à–∏–±–∫–∞</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {bulkResults.details?.map(
                            (detail: any, index: number) => (
                              <TableRow key={index}>
                                <TableCell className="font-medium">
                                  {detail.studentName}
                                </TableCell>
                                <TableCell>
                                  {detail.success ? (
                                    <Badge
                                      variant="default"
                                      className="bg-green-100 text-green-800"
                                    >
                                      <CheckCircle className="h-3 w-3 mr-1" />
                                      –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                                    </Badge>
                                  ) : (
                                    <Badge
                                      variant="destructive"
                                      className="bg-red-100 text-red-800"
                                    >
                                      <XCircle className="h-3 w-3 mr-1" />
                                      –û—à–∏–±–∫–∞
                                    </Badge>
                                  )}
                                </TableCell>
                                <TableCell>
                                  {detail.messenger ? (
                                    <Badge
                                      variant="outline"
                                      className="capitalize"
                                    >
                                      {detail.messenger === "whatsapp"
                                        ? "üì± WhatsApp"
                                        : "üì± Telegram"}
                                    </Badge>
                                  ) : (
                                    <span className="text-gray-400">‚Äî</span>
                                  )}
                                </TableCell>
                                <TableCell>
                                  {detail.error ? (
                                    <span className="text-sm text-red-600">
                                      {detail.error}
                                    </span>
                                  ) : (
                                    <span className="text-gray-400">‚Äî</span>
                                  )}
                                </TableCell>
                              </TableRow>
                            )
                          )}
                        </TableBody>
                      </Table>
                    </div>
                  </div>

                  <DialogFooter>
                    <Button
                      variant="outline"
                      onClick={() => {
                        // –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç
                        const exportText = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
–ö—É—Ä—Å: ${course.direction}
–î–∞—Ç–∞: ${new Date().toLocaleString("ru-RU")}

–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${bulkResults.total}
- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${bulkResults.sent}
- –û—à–∏–±–æ–∫: ${bulkResults.failed}

–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
${bulkResults.details
  ?.map(
    (detail: any, index: number) =>
      `${index + 1}. ${detail.studentName} - ${
        detail.success
          ? `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (${detail.messenger})`
          : `–û—à–∏–±–∫–∞: ${detail.error}`
      }`
  )
  .join("\n")}`;

                        navigator.clipboard.writeText(exportText);
                        toast.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
                      }}
                    >
                      üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
                    </Button>
                    <Button onClick={() => setIsResultsDialogOpen(false)}>
                      –ó–∞–∫—Ä—ã—Ç—å
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            )}
          </div>
            
          {/* –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–º–º–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º tooltip */}
          <Tooltip>
            <TooltipTrigger asChild>
              <span className="flex items-center gap-1 cursor-help">
                <CreditCard className="h-4 w-4" />
                {role === "Teacher"
                  ? `${teacherIncomeFromPaid.toLocaleString(
                      "ru-RU"
                    )}/${teacherIncomeFromTotal.toLocaleString("ru-RU")} ${
                      course.currency
                    }`
                  : `${paidSum.toLocaleString(
                      "ru-RU"
                    )}/${totalSum.toLocaleString("ru-RU")} ${course.currency}`}
                <Info className="h-3 w-3 text-gray-400" />
              </span>
            </TooltipTrigger>
            <TooltipContent side="left" className="max-w-xs text-white">
              {role === "Teacher" ? (
                // Tooltip –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                <div className="space-y-2 text-sm">
                  <div className="font-medium text-white">–í–∞—à –¥–æ—Ö–æ–¥</div>
                  <div className="text-white">
                    –ö –≤—ã–ø–ª–∞—Ç–µ –æ—Ç –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö:{" "}
                    <span className="font-medium">
                      {teacherIncomeFromPaid.toLocaleString("ru-RU")}{" "}
                      {course.currency}
                    </span>
                  </div>
                  <div className="text-white">
                    –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç –≤—Å–µ—Ö:{" "}
                    <span className="font-medium">
                      {teacherIncomeFromTotal.toLocaleString("ru-RU")}{" "}
                      {course.currency}
                    </span>
                  </div>
                  <div className="text-xs text-gray-300 border-t border-gray-600 pt-2">
                    –†–∞—Å—á–µ—Ç: –í–∞–ª–æ–≤—ã–π –¥–æ—Ö–æ–¥ - 10% (–Ω–∞–ª–æ–≥–∏ + –±–∞–Ω–∫){" "}
                    {rentTotal > 0 &&
                      `- –∞—Ä–µ–Ω–¥–∞ (${rentTotal.toLocaleString("ru-RU")} ${
                        course.currency
                      })`}{" "}
                    √ó 70% (–≤–∞—à–∞ –¥–æ–ª—è)
                  </div>
                </div>
              ) : (
                // Tooltip –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                <div className="space-y-2 text-sm">
                  <div className="font-medium text-white">
                    –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
                  </div>
                  <div className="text-white">
                    –í–∞–ª–æ–≤—ã–π –¥–æ—Ö–æ–¥:{" "}
                    <span className="font-medium">
                      {paidSum.toLocaleString("ru-RU")}/
                      {totalSum.toLocaleString("ru-RU")} {course.currency}
                    </span>
                  </div>
                  <div className="text-white">
                    –ö –≤—ã–ø–ª–∞—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é:{" "}
                    <span className="font-medium">
                      {teacherIncomeFromPaid.toLocaleString("ru-RU")}/
                      {teacherIncomeFromTotal.toLocaleString("ru-RU")}{" "}
                      {course.currency}
                    </span>
                  </div>
                  <div className="text-white">
                    –ü—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏:{" "}
                    <span className="font-medium">
                      {companyProfitFromPaid.toLocaleString("ru-RU")}/
                      {companyProfitFromTotal.toLocaleString("ru-RU")}{" "}
                      {course.currency}
                    </span>
                  </div>
                  <div className="text-xs text-gray-300 border-t border-gray-600 pt-2">
                    –†–∞—Å—á–µ—Ç: –í–∞–ª–æ–≤—ã–π –¥–æ—Ö–æ–¥ - 10% (–Ω–∞–ª–æ–≥–∏ + –±–∞–Ω–∫){" "}
                    {rentTotal > 0 &&
                      `- –∞—Ä–µ–Ω–¥–∞ (${rentTotal.toLocaleString("ru-RU")} ${
                        course.currency
                      })`}{" "}
                    ‚Üí 70% –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é, 30% –∫–æ–º–ø–∞–Ω–∏–∏
                  </div>
                </div>
              )}
            </TooltipContent>
          </Tooltip>
        </CardDescription>
      </CardHeader>

      {invoices.length === 0 ? (
        <CardContent>
          <div className="text-center p-8">
            <p className="text-gray-600">
              –ù–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è
            </p>
          </div>
        </CardContent>
      ) : (
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>–°—Ç—É–¥–µ–Ω—Ç</TableHead>
                  {/* –°—Ç–æ–ª–±—Ü—ã —Å—É–º–º—ã –∏ –æ–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ */}
                  {role === "Manager" && (
                    <>
                      <TableHead>–°—É–º–º–∞</TableHead>
                      <TableHead>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã</TableHead>
                    </>
                  )}
                  {courseDates.map((courseDate, index) => (
                    <TableHead key={index} className="text-center min-w-12">
                      <div className="text-xs">
                        <div>{formatAttendanceDate(courseDate.date)}</div>
                        <div className="text-gray-500">
                          {courseDate.dayName.slice(0, 2)}
                        </div>
                      </div>
                    </TableHead>
                  ))}
                  <TableHead className="text-center w-16">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {invoices.map((invoice) => (
                  <TableRow
                    key={invoice.documentId}
                    className="hover:bg-gray-50"
                  >
                    <TableCell>
                      <div>
                        <p className="font-medium">
                          {invoice.name} {invoice.family}
                        </p>
                        {invoice.tinkoffOrderId && (
                          <p className="text-sm text-gray-500">
                            ID: {invoice.tinkoffOrderId}
                          </p>
                        )}
                      </div>
                    </TableCell>
                    {/* –°—Ç–æ–ª–±—Ü—ã —Å—É–º–º—ã –∏ –æ–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ */}
                    {role === "Manager" && (
                      <>
                        <TableCell>
                          <div className="text-sm">
                            <p className="font-medium">
                              {invoice.sum} {invoice.currency}
                            </p>
                          </div>
                        </TableCell>
                        <TableCell>{getPaymentStatusBadge(invoice)}</TableCell>
                      </>
                    )}
                    {courseDates.map((courseDate, index) => {
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–∞ –¥–∞—Ç–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞
                      const studentStartDate = new Date(invoice.startDate);
                      const studentEndDate = new Date(invoice.endDate);
                      const isInStudentPeriod =
                        courseDate.date >= studentStartDate &&
                        courseDate.date <= studentEndDate;
                      const dateKey = courseDate.date
                        .toISOString()
                        .split("T")[0];

                      return (
                        <TableCell key={index} className="text-center">
                          {isInStudentPeriod ? (
                            <StudentAttendanceCell
                              status={attendanceManager.getAttendanceStatus(
                                invoice.documentId,
                                dateKey
                              )}
                              isPending={attendanceManager.isPending(
                                invoice.documentId,
                                dateKey
                              )}
                              hasError={attendanceManager.hasError(
                                invoice.documentId
                              )}
                              onClick={() => {
                                const currentStatus =
                                  attendanceManager.getAttendanceStatus(
                                    invoice.documentId,
                                    dateKey
                                  );
                                let newStatus: AttendanceStatus;
                                if (currentStatus === "unknown") {
                                  newStatus = "present";
                                } else if (currentStatus === "present") {
                                  newStatus = "absent";
                                } else {
                                  newStatus = "unknown";
                                }
                                attendanceManager.updateAttendance(
                                  invoice.documentId,
                                  dateKey,
                                  newStatus
                                );
                              }}
                            />
                          ) : (
                            <div className="w-8 h-8"></div>
                          )}
                        </TableCell>
                      );
                    })}
                    <TableCell className="text-center">
                      <StudentActionsDropdown
                        studentId={invoice.documentId}
                        studentName={invoice.name}
                        studentFamily={invoice.family}
                        invoiceDocumentId={invoice.documentId}
                        courseId={course.documentId}
                        onStudentDeleted={handleStudentDeleted}
                        onStudentUpdated={handleStudentDeleted}
                        role={role}
                        courseStartTime={course.startTime}
                        courseEndTime={course.endTime}
                        courseTimezone={course.timezone}
                        courseWeekdays={course.weekdays}
                      />
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      )}
    </Card>
  );
}
