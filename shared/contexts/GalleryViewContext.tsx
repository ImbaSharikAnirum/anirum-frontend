'use client'

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–æ–º –≥–∞–ª–µ—Ä–µ–∏ (–≥–∞–π–¥—ã/–ø–∏–Ω—ã)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GalleryPersistenceManager –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @layer shared/contexts
 */

import { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react'
import { galleryPersistence, type GalleryView } from '@/shared/lib/galleryPersistence'

interface GalleryViewContextType {
  currentView: GalleryView
  setCurrentView: (view: GalleryView) => void
  switchToPopular: (shouldScroll?: boolean) => void
  switchToMyPins: () => void
  switchToMyGuides: () => void
  switchToSaved: () => void
  switchToSearch: (query: string, tags?: string[], shouldScroll?: boolean) => void
  searchQuery: string
  searchTags: string[]
}

const GalleryViewContext = createContext<GalleryViewContextType | undefined>(undefined)

interface GalleryViewProviderProps {
  children: ReactNode
  defaultView?: GalleryView
}

export function GalleryViewProvider({ children, defaultView = 'popular' }: GalleryViewProviderProps) {
  // üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ GalleryPersistenceManager
  const [currentView, setCurrentView] = useState<GalleryView>(() => {
    const saved = galleryPersistence.restore()
    return saved?.view || defaultView
  })

  const [searchQuery, setSearchQuery] = useState(() => {
    const saved = galleryPersistence.restore()
    return saved?.query || ''
  })

  const [searchTags, setSearchTags] = useState<string[]>(() => {
    const saved = galleryPersistence.restore()
    return saved?.tags || []
  })

  // üîß –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º searchQuery –∏ tags —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
    // –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    galleryPersistence.save({
      view: currentView,
      query: currentView === 'search' ? searchQuery : '',
      tags: currentView === 'search' ? searchTags : []
    })
  }, [currentView, searchQuery, searchTags])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ hash –≤ URL –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Pinterest
  useEffect(() => {
    const checkHash = () => {
      const hash = window.location.hash
      if (hash === '#pinterest') {
        setCurrentView('pins')
        // –û—á–∏—â–∞–µ–º hash –¥–ª—è —á–∏—Å—Ç–æ–≥–æ URL
        window.history.replaceState(null, '', window.location.pathname)
        // –°–∫—Ä–æ–ª–ª –∫ –≥–∞–ª–µ—Ä–µ–µ
        setTimeout(() => {
          const galleryElement = document.querySelector('.guides-gallery')
          if (galleryElement) {
            galleryElement.scrollIntoView({ behavior: 'smooth' })
          }
        }, 100)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º hash –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkHash()

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è hash
    window.addEventListener('hashchange', checkHash)

    return () => {
      window.removeEventListener('hashchange', checkHash)
    }
  }, [])

  const switchToPopular = useCallback((shouldScroll = true) => {
    setCurrentView('popular')
    // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
    setSearchQuery('')
    setSearchTags([])

    // –°–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (shouldScroll) {
      setTimeout(() => {
        const galleryElement = document.querySelector('.guides-gallery')
        if (galleryElement) {
          const rect = galleryElement.getBoundingClientRect()
          const isVisible = rect.top >= 0 && rect.top <= window.innerHeight

          // –°–∫—Ä–æ–ª–ª–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤–∏–¥–Ω–∞
          if (!isVisible) {
            galleryElement.scrollIntoView({ behavior: 'smooth' })
          }
        }
      }, 100)
    }
  }, [])

  const switchToMyPins = () => {
    setCurrentView('pins')
    // –°–∫—Ä–æ–ª–ª –∫ –≥–∞–ª–µ—Ä–µ–µ
    setTimeout(() => {
      const galleryElement = document.querySelector('.guides-gallery')
      if (galleryElement) {
        galleryElement.scrollIntoView({ behavior: 'smooth' })
      }
    }, 100)
  }

  const switchToMyGuides = () => {
    setCurrentView('guides')
    // –°–∫—Ä–æ–ª–ª –∫ –≥–∞–ª–µ—Ä–µ–µ
    setTimeout(() => {
      const galleryElement = document.querySelector('.guides-gallery')
      if (galleryElement) {
        galleryElement.scrollIntoView({ behavior: 'smooth' })
      }
    }, 100)
  }

  const switchToSaved = () => {
    setCurrentView('saved')
    // –°–∫—Ä–æ–ª–ª –∫ –≥–∞–ª–µ—Ä–µ–µ
    setTimeout(() => {
      const galleryElement = document.querySelector('.guides-gallery')
      if (galleryElement) {
        galleryElement.scrollIntoView({ behavior: 'smooth' })
      }
    }, 100)
  }

  const switchToSearch = useCallback((query: string, tags: string[] = [], shouldScroll = false) => {
    setSearchQuery(query)
    setSearchTags(tags)
    setCurrentView('search')

    // –°–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–ª–µ—Ä–µ—è –Ω–µ –≤–∏–¥–Ω–∞ –ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
    if (shouldScroll) {
      setTimeout(() => {
        const galleryElement = document.querySelector('.guides-gallery')
        if (galleryElement) {
          const rect = galleryElement.getBoundingClientRect()
          const isVisible = rect.top >= 0 && rect.top <= window.innerHeight

          // –°–∫—Ä–æ–ª–ª–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–ª–µ—Ä–µ—è –Ω–µ –≤–∏–¥–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
          if (!isVisible) {
            galleryElement.scrollIntoView({ behavior: 'smooth' })
          }
        }
      }, 100)
    }
  }, [])

  return (
    <GalleryViewContext.Provider
      value={{
        currentView,
        setCurrentView,
        switchToPopular,
        switchToMyPins,
        switchToMyGuides,
        switchToSaved,
        switchToSearch,
        searchQuery,
        searchTags,
      }}
    >
      {children}
    </GalleryViewContext.Provider>
  )
}

export function useGalleryView() {
  const context = useContext(GalleryViewContext)
  if (context === undefined) {
    throw new Error('useGalleryView must be used within a GalleryViewProvider')
  }
  return context
}