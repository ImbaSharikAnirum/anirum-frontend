/**
 * Gallery State Persistence Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
 * @layer shared/lib
 */

export type GalleryView = 'popular' | 'guides' | 'pins' | 'saved' | 'search'

interface GalleryState {
  view: GalleryView
  query: string
  tags: string[]
  timestamp: number
}

const STORAGE_KEY = 'gallery-state'
const MAX_AGE_MS = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç

/**
 * Singleton –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
 */
class GalleryPersistenceManager {
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  save(state: Omit<GalleryState, 'timestamp'>): void {
    if (typeof window === 'undefined') return

    try {
      const stateWithTimestamp: GalleryState = {
        ...state,
        timestamp: Date.now()
      }
      sessionStorage.setItem(STORAGE_KEY, JSON.stringify(stateWithTimestamp))
      console.log('üíæ Gallery state saved:', state.view, state.query ? `"${state.query}"` : '')
    } catch (error) {
      console.error('Failed to save gallery state:', error)
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
   */
  restore(): GalleryState | null {
    if (typeof window === 'undefined') return null

    try {
      const saved = sessionStorage.getItem(STORAGE_KEY)
      if (!saved) return null

      const state: GalleryState = JSON.parse(saved)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞
      const age = Date.now() - state.timestamp
      if (age > MAX_AGE_MS) {
        console.log('‚è∞ Gallery state expired, clearing...')
        this.clear()
        return null
      }

      console.log('üì¶ Gallery state restored:', state.view, `(${Math.round(age / 1000)}s old)`)
      return state
    } catch (error) {
      console.error('Failed to restore gallery state:', error)
      return null
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  clear(): void {
    if (typeof window === 'undefined') return

    try {
      sessionStorage.removeItem(STORAGE_KEY)
      console.log('üóëÔ∏è Gallery state cleared')
    } catch (error) {
      console.error('Failed to clear gallery state:', error)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: reload vs navigation
   */
  shouldRestore(): boolean {
    if (typeof window === 'undefined') return false

    const state = this.restore()
    return state !== null
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  getStateAge(): number | null {
    if (typeof window === 'undefined') return null

    try {
      const saved = sessionStorage.getItem(STORAGE_KEY)
      if (!saved) return null

      const state: GalleryState = JSON.parse(saved)
      return Date.now() - state.timestamp
    } catch {
      return null
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const galleryPersistence = new GalleryPersistenceManager()
