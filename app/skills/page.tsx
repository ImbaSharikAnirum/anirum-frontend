'use client'

import { useState, useCallback, useRef, useEffect, useMemo } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { SkillsTreeFlow, getLocalDraft, clearLocalDraft } from '@/widgets/skills-tree'
import { SkillGuidesFlow, SkillGuidesFlowRef, getLocalGuides, clearLocalGuides } from '@/widgets/skill-guides'
import { Button } from '@/components/ui/button'
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'
import { ChevronLeft, Home, Eye, Edit, Loader2, RefreshCw } from 'lucide-react'
import { useSkills } from '@/shared/lib/contexts/SkillsContext'
import { useUser } from '@/entities/user'
import { SkillTree, publishSkillTree, skillTreeAPI } from '@/entities/skill-tree'
import { getLastOpenedTree, setLastOpenedTree, clearLastOpenedTree } from '@/shared/lib/storage/lastOpenedTree'
import type { Node, Edge } from '@xyflow/react'
import { useAutoSave } from '@/shared/hooks'
import { toast } from 'sonner'

type ViewState =
  | { type: 'tree' }
  | { type: 'skill'; skillId: string; skillLabel: string; skillColor: string }

type Mode = 'view' | 'edit'

type SelectedItem = {
  type: 'tree' | 'skill' | 'guide'
  title: string
  thumbnail?: string
  skillCount?: number
  guideCount?: number
} | null

export default function SkillsPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const treeId = searchParams?.get('tree')
  const { user } = useUser()

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–∏–¥—Ä–∞—Ü–∏–∏
  const [isMounted, setIsMounted] = useState(false)
  const [apiTree, setApiTree] = useState<SkillTree | null>(null)
  const [loadingTree, setLoadingTree] = useState(false)
  const [localStorageVersion, setLocalStorageVersion] = useState(0) // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

  useEffect(() => {
    setIsMounted(true)
  }, [])

  // –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ
  useEffect(() => {
    if (!isMounted) return

    // –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –≤ URL, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (treeId) return

    const autoOpenTree = async () => {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –¥–µ—Ä–µ–≤–æ
      const lastTreeId = getLastOpenedTree()

      if (lastTreeId) {
        console.log('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ—Ä–µ–≤–æ:', lastTreeId)
        router.push(`/skills?tree=${lastTreeId}`, { scroll: false })
        return
      }

      // 2. –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ API
      try {
        const { skillTrees } = await skillTreeAPI.getSkillTrees({
          pageSize: 1,
          page: 1
        })

        if (skillTrees.length > 0) {
          const firstTree = skillTrees[0]
          console.log('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–µ—Ä–µ–≤–æ:', firstTree.documentId)
          router.push(`/skills?tree=${firstTree.documentId}`, { scroll: false })
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞:', error)
      }
    }

    autoOpenTree()
  }, [isMounted, treeId, router])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–µ—Ä–µ–≤–∞
  useEffect(() => {
    if (treeId) {
      setLastOpenedTree(treeId)
    }
  }, [treeId])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –∏–∑ API
  // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º —Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å (–ø–∞—Ç—Ç–µ—Ä–Ω Miro/Figma)
  // cache: 'no-store' –≤ BaseAPI –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!isMounted || !treeId) return;

    const loadTree = async () => {
      setLoadingTree(true);
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º localStorageVersion —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å stale localStorage –¥–∞–Ω–Ω—ã–µ
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç —Å–≤–µ–∂–∏–µ API –¥–∞–Ω–Ω—ã–µ
        setLocalStorageVersion(Date.now());

        const tree = await skillTreeAPI.getSkillTree(treeId);
        setApiTree(tree);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞:', error);
        setApiTree(null);
      } finally {
        setLoadingTree(false);
      }
    };

    loadTree();
  }, [treeId, isMounted]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞
  const currentTreeData = useMemo(() => {
    if (apiTree) {
      return {
        title: apiTree.title,
        thumbnail: apiTree.image && typeof apiTree.image === 'object' ? apiTree.image.url : '',
        skillCount: apiTree.skills?.length || 0,
        guideCount: apiTree.skills?.reduce((sum, skill) => sum + (skill.guides?.length || 0), 0) || 0,
      };
    }
    return { title: '', thumbnail: '', skillCount: 0, guideCount: 0 };
  }, [apiTree]);

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π localStorage –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (!treeId) return;

    const handleStorageChange = () => {
      setLocalStorageVersion(v => v + 1);
    };

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è storage (—Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏)
    window.addEventListener('storage', handleStorageChange);

    // –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    window.addEventListener('local-draft-updated', handleStorageChange as EventListener);

    return () => {
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('local-draft-updated', handleStorageChange as EventListener);
    };
  }, [treeId]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ—Ä–µ–≤–æ
  const canEdit = useMemo(() => {
    if (!user) return false
    // –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ
    if (user.role?.name === 'Manager') return true
    // –ê–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ API
    if (apiTree && apiTree.owner?.documentId === user.documentId) return true
    return false
  }, [user, apiTree])

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ (API + –ª–æ–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏)
  const treeNodes = useMemo(() => {
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–¥—ã –∏–∑ API
    let nodes: Node[] = [];

    if (apiTree && apiTree.skills && apiTree.skills.length > 0) {
      nodes = apiTree.skills.map(skill => ({
        id: skill.documentId,
        type: 'skill',
        data: {
          label: skill.title,
          thumbnail: skill.image && typeof skill.image === 'object' ? skill.image.url : undefined,
          imageId: skill.image && typeof skill.image === 'object' ? skill.image.id : undefined,
          guideCount: skill.guides?.length || 0,
          completed: false,
        },
        position: skill.position || { x: Math.random() * 400 + 100, y: Math.random() * 400 + 100 },
      }));
    }

    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    // –í–ê–ñ–ù–û: –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏!
    if (treeId && canEdit) {
      const localDraft = getLocalDraft(treeId);
      if (localDraft.nodes && localDraft.nodes.length > 0) {
        nodes = localDraft.nodes;
      }
    }

    return nodes;
  }, [apiTree, treeId, localStorageVersion, canEdit, user]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ (API + –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑ treeNodes)
  const currentSkillsData = useMemo(() => {
    const skillsMap: Record<string, any> = {};

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º treeNodes, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ API, —Ç–∞–∫ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    treeNodes.forEach(node => {
      skillsMap[node.id] = {
        label: node.data.label,
        thumbnail: node.data.thumbnail,
        guideCount: node.data.guideCount || 0,
      };
    });

    return skillsMap;
  }, [treeNodes]);

  const treeEdges = useMemo(() => {
    if (!apiTree) return [];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤—è–∑–∏ –∏–∑ –±–∞–∑—ã
    if (apiTree.skillEdges && apiTree.skillEdges.length > 0) {
      return apiTree.skillEdges;
    }

    // –ï—Å–ª–∏ —Å–≤—è–∑–µ–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }, [apiTree]);

  const [view, setView] = useState<ViewState>({ type: 'tree' })
  const [selectedItem, setSelectedItem] = useState<SelectedItem>(null)
  const [mode, setMode] = useState<Mode>('view')
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [isPublishing, setIsPublishing] = useState(false)
  const [saveStatus, setSaveStatus] = useState<'saved' | 'saving' | 'unsaved' | 'error'>('saved')

  const skillGuidesFlowRef = useRef<SkillGuidesFlowRef>(null)
  const { setAddGuideToFlow, setIsSkillMode, setIsOwnTree, setIsEditMode } = useSkills()

  // –ü—Ä–∏ —Å–º–µ–Ω–µ –¥–µ—Ä–µ–≤–∞ - –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ñ–ª–∞–≥ isOwnTree
  useEffect(() => {
    setMode('view') // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    setIsOwnTree(canEdit)
  }, [canEdit, treeId, setIsOwnTree])

  // –û–±–Ω–æ–≤–ª—è–µ–º isEditMode –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    setIsEditMode(mode === 'edit')
  }, [mode, setIsEditMode])

  // –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ã–∫–æ–≤
  useEffect(() => {
    setView({ type: 'tree' })
    setSelectedItem(null)
  }, [treeId])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ä–µ–≤–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º tree
  useEffect(() => {
    if (view.type === 'tree' && isMounted) {
      setSelectedItem({
        type: 'tree',
        title: currentTreeData.title,
        thumbnail: currentTreeData.thumbnail,
        skillCount: currentTreeData.skillCount,
        guideCount: currentTreeData.guideCount,
      })
    }
  }, [view.type, isMounted, currentTreeData])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–∂–∏–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    if (view.type === 'skill' && skillGuidesFlowRef.current) {
      setAddGuideToFlow(() => skillGuidesFlowRef.current!.addGuide)
      setIsSkillMode(true)
    } else {
      setAddGuideToFlow(null)
      setIsSkillMode(false)
    }
  }, [view, setAddGuideToFlow, setIsSkillMode])

  const handleSkillOpen = useCallback((skillId: string) => {
    const skillData = currentSkillsData[skillId]
    if (skillData) {
      setView({
        type: 'skill',
        skillId,
        skillLabel: skillData.label,
        skillColor: '#3b82f6', // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      })
      setSelectedItem({
        type: 'skill',
        title: skillData.label,
        thumbnail: skillData.thumbnail,
        guideCount: skillData.guideCount || 0,
      })
    } else {
      console.error('–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', skillId)
    }
  }, [currentSkillsData])

  const handleBackToTree = useCallback(() => {
    setView({ type: 'tree' })
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä–µ–≤–µ
    setSelectedItem({
      type: 'tree',
      title: currentTreeData.title,
      thumbnail: currentTreeData.thumbnail,
      skillCount: currentTreeData.skillCount,
      guideCount: currentTreeData.guideCount,
    })
  }, [currentTreeData])

  const handleItemSelect = useCallback((item: SelectedItem) => {
    setSelectedItem(item)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handlePublish = useCallback(async () => {
    if (!treeId || !apiTree || isPublishing) return;

    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ã–∫–æ–≤
    const localDraft = getLocalDraft(treeId);

    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–∞–π–¥–æ–≤ (–µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ skill)
    let localGuides = { nodes: null as any, edges: null as any };
    let currentSkillId: string | undefined;

    if (view.type === 'skill') {
      currentSkillId = view.skillId;
      localGuides = getLocalGuides(view.skillId);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const hasTreeChanges = localDraft.nodes || localDraft.edges;
    const hasGuideChanges = localGuides.nodes || localGuides.edges;

    if (!hasTreeChanges && !hasGuideChanges) {
      toast.info('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      return;
    }

    setIsPublishing(true);

    console.log('üéØ –ü—É–±–ª–∏–∫–∞—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:');
    console.log('üéØ view.type:', view.type);
    console.log('üéØ currentSkillId:', currentSkillId);
    console.log('üéØ localGuides.nodes:', localGuides.nodes?.length);
    console.log('üéØ localGuides.edges:', localGuides.edges?.length);
    console.log('üéØ localDraft.nodes:', localDraft.nodes?.length);
    console.log('üéØ localDraft.edges:', localDraft.edges?.length);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      const result = await publishSkillTree(
        treeId,
        apiTree,
        localDraft.nodes || [],
        localDraft.edges || [],
        undefined, // –ë–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–∞–π–¥–æ–≤
        currentSkillId,
        localGuides.nodes || undefined,
        localGuides.edges || undefined
      );

      if (result.success && result.tree) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setApiTree(result.tree);

        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
        if (hasTreeChanges) {
          clearLocalDraft(treeId);
        }
        if (hasGuideChanges && currentSkillId) {
          clearLocalGuides(currentSkillId);
        }

        toast.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã');
      } else {
        toast.error(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${result.error}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    } finally {
      setIsPublishing(false);
    }
  }, [treeId, apiTree, isPublishing, view])

  // Auto-save (—Ç–∏—Ö–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
  const handleAutoSave = useCallback(async () => {
    if (!treeId || !apiTree || isPublishing) return;

    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const localDraft = getLocalDraft(treeId);
    let localGuides = { nodes: null as any, edges: null as any };
    let currentSkillId: string | undefined;

    if (view.type === 'skill') {
      currentSkillId = view.skillId;
      localGuides = getLocalGuides(view.skillId);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const hasTreeChanges = localDraft.nodes || localDraft.edges;
    const hasGuideChanges = localGuides.nodes || localGuides.edges;

    if (!hasTreeChanges && !hasGuideChanges) {
      setSaveStatus('saved');
      return;
    }

    setSaveStatus('saving');

    try {
      const result = await publishSkillTree(
        treeId,
        apiTree,
        localDraft.nodes || [],
        localDraft.edges || [],
        undefined, // –ë–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è auto-save
        currentSkillId,
        localGuides.nodes || undefined,
        localGuides.edges || undefined
      );

      if (result.success && result.tree) {
        setApiTree(result.tree);

        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
        if (hasTreeChanges) {
          clearLocalDraft(treeId);
        }
        if (hasGuideChanges && currentSkillId) {
          clearLocalGuides(currentSkillId);
        }

        setSaveStatus('saved');
        console.log('‚úÖ Auto-save —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      } else {
        setSaveStatus('error');
        console.error('‚ùå Auto-save –æ—à–∏–±–∫–∞:', result.error);
      }
    } catch (error) {
      setSaveStatus('error');
      console.error('‚ùå Auto-save –æ—à–∏–±–∫–∞:', error);
    }
  }, [treeId, apiTree, isPublishing, view])

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏)
  const handleRetrySync = useCallback(async () => {
    if (saveStatus === 'saving') return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏

    const currentStatus = saveStatus;
    try {
      await handleAutoSave();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      if (saveStatus !== 'error') {
        toast.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      }
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
      console.error('Sync retry error:', error);
    }
  }, [saveStatus, handleAutoSave])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasUnsavedChanges = useMemo(() => {
    if (!treeId) return false;

    const localDraft = getLocalDraft(treeId);
    let localGuides: { nodes: Node[] | null; edges: Edge[] | null } = { nodes: null, edges: null };

    if (view.type === 'skill') {
      localGuides = getLocalGuides(view.skillId);
    }

    const hasTreeChanges = localDraft.nodes || localDraft.edges;
    const hasGuideChanges = localGuides.nodes || localGuides.edges;

    return Boolean(hasTreeChanges || hasGuideChanges);
  }, [treeId, view, localStorageVersion]) // localStorageVersion —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (hasUnsavedChanges) {
      setSaveStatus('unsaved');
    }
  }, [hasUnsavedChanges])

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è auto-save
  useAutoSave({
    onSave: handleAutoSave,
    delay: 5000, // 5 —Å–µ–∫—É–Ω–¥
    hasChanges: hasUnsavedChanges,
    enabled: mode === 'edit', // –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  })

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞/–≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const handleBeforeUnload = async (e: BeforeUnloadEvent) => {
      if (hasUnsavedChanges && mode === 'edit') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        e.preventDefault()
        e.returnValue = ''

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try {
          await handleAutoSave()
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º:', error)
        }
      }
    }

    window.addEventListener('beforeunload', handleBeforeUnload)

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload)
    }
  }, [hasUnsavedChanges, mode, handleAutoSave])

  // –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è
  const handleDeleteClick = useCallback(() => {
    setIsDeleteDialogOpen(true)
  }, [])

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
  const handleDeleteConfirm = useCallback(async () => {
    if (!treeId) return;

    if (view.type === 'tree') {
      // –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
      if (apiTree) {
        try {
          await skillTreeAPI.deleteSkillTree(treeId);
          setIsDeleteDialogOpen(false);

          // –û—á–∏—â–∞–µ–º lastOpenedTree –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ—Ä–µ–≤–æ
          const lastTreeId = getLastOpenedTree();
          if (lastTreeId === treeId) {
            clearLastOpenedTree();
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ UI —Å–∞–π–¥–±–∞—Ä–∞
          window.dispatchEvent(new CustomEvent('skill-tree-deleted', {
            detail: { treeId }
          }));

          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –¥–µ—Ä–µ–≤–∞
          router.push('/skills');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞:', error);
          alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞');
        }
      }
    } else if (view.type === 'skill') {
      // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ —á–µ—Ä–µ–∑ API
      if (apiTree) {
        try {
          await skillTreeAPI.deleteSkill(view.skillId);
          setIsDeleteDialogOpen(false);

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ä–µ–≤—É
          setView({ type: 'tree' });
          setSelectedItem({
            type: 'tree',
            title: currentTreeData.title,
            thumbnail: currentTreeData.thumbnail,
            skillCount: currentTreeData.skillCount,
            guideCount: currentTreeData.guideCount,
          });

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ
          window.location.reload();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞:', error);
          alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞');
        }
      }
    }
  }, [view, treeId, apiTree, currentTreeData, router])

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const deleteDialogContent = useMemo(() => {
    if (view.type === 'tree') {
      return {
        title: '–£–¥–∞–ª–∏—Ç—å –¥–µ—Ä–µ–≤–æ –Ω–∞–≤—ã–∫–æ–≤?',
        description: '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –¥–µ—Ä–µ–≤–æ? –í—Å–µ –Ω–∞–≤—ã–∫–∏ –∏ –≥–∞–π–¥—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      }
    } else if (view.type === 'skill') {
      return {
        title: '–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫?',
        description: '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –Ω–∞–≤—ã–∫? –í—Å–µ –≥–∞–π–¥—ã –Ω–∞–≤—ã–∫–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      }
    }
    return { title: '', description: '' }
  }, [view])

  // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–∏–¥—Ä–∞—Ü–∏–∏
  if (!isMounted) {
    return (
      <div className="w-full h-[calc(100vh-64px)] md:h-[calc(100vh-64px-73px)] flex items-center justify-center">
        <div className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–µ—Ä–µ–≤–∞
  if (loadingTree) {
    return (
      <div className="w-full h-[calc(100vh-64px)] md:h-[calc(100vh-64px-73px)] flex items-center justify-center">
        <div className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –Ω–∞–≤—ã–∫–æ–≤...</div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  if (!apiTree && treeId) {
    return (
      <div className="w-full h-[calc(100vh-64px)] md:h-[calc(100vh-64px-73px)] flex items-center justify-center">
        <div className="text-center space-y-4">
          <p className="text-muted-foreground">–î–µ—Ä–µ–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
          <Button onClick={() => router.push('/skills')}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
          </Button>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –¥–µ—Ä–µ–≤–æ
  if (!treeId) {
    return (
      <div className="w-full h-[calc(100vh-64px)] md:h-[calc(100vh-64px-73px)] flex items-center justify-center">
        <div className="text-muted-foreground">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞</div>
      </div>
    )
  }

  return (
    <div className="w-full h-[calc(100vh-64px)] md:h-[calc(100vh-64px-73px)] flex">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å ReactFlow */}
      <div className="flex-1 relative">
        {/* Breadcrumbs / –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        {view.type === 'skill' && (
          <div className="absolute top-4 left-4 z-10 flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={handleBackToTree}
              className="gap-2 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60"
            >
              <ChevronLeft className="h-4 w-4" />
              –ù–∞–∑–∞–¥ –∫ –¥—Ä–µ–≤—É –Ω–∞–≤—ã–∫–æ–≤
            </Button>
            <div className="px-3 py-1.5 rounded-md text-sm font-medium bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border flex items-center gap-2">
              {selectedItem?.type === 'skill' && selectedItem.thumbnail && (
                <div className="w-6 h-6 rounded-full overflow-hidden border border-foreground/30">
                  <img
                    src={selectedItem.thumbnail}
                    alt={view.skillLabel}
                    className="w-full h-full object-cover"
                  />
                </div>
              )}
              {view.skillLabel}
            </div>

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å */}
            {canEdit && (
              <Tabs value={mode} onValueChange={(value) => setMode(value as Mode)}>
                <TabsList className="bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
                  <TabsTrigger value="view" className="gap-1.5">
                    <Eye className="h-3.5 w-3.5" />
                    –ü—Ä–æ—Å–º–æ—Ç—Ä
                  </TabsTrigger>
                  <TabsTrigger value="edit" className="gap-1.5">
                    <Edit className="h-3.5 w-3.5" />
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            )}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
            {mode === 'edit' && (
              <div className="flex items-center gap-2">
                <div className="px-3 py-1.5 rounded-md text-sm bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border flex items-center gap-2">
                  {saveStatus === 'saved' && (
                    <>
                      <div className="w-2 h-2 rounded-full bg-green-500" />
                      <span className="text-muted-foreground">–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
                    </>
                  )}
                  {saveStatus === 'saving' && (
                    <>
                      <Loader2 className="w-3 h-3 animate-spin text-blue-500" />
                      <span className="text-muted-foreground">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
                    </>
                  )}
                  {saveStatus === 'unsaved' && (
                    <>
                      <div className="w-2 h-2 rounded-full bg-yellow-500" />
                      <span className="text-muted-foreground">–ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
                    </>
                  )}
                  {saveStatus === 'error' && (
                    <>
                      <div className="w-2 h-2 rounded-full bg-red-500" />
                      <span className="text-muted-foreground">–û—à–∏–±–∫–∞</span>
                    </>
                  )}
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ */}
                {saveStatus === 'error' && (
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={handleRetrySync}
                    className="gap-1.5"
                  >
                    <RefreshCw className="h-3.5 w-3.5" />
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                )}
              </div>
            )}
          </div>
        )}

        {view.type === 'tree' && (
          <div className="absolute top-4 left-4 z-10 flex items-center gap-3">
            <div className="px-3 py-1.5 rounded-md text-sm font-medium bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border flex items-center gap-2">
              {currentTreeData.thumbnail && (
                <div className="w-6 h-6 rounded-full overflow-hidden border border-foreground/30">
                  <img
                    src={currentTreeData.thumbnail}
                    alt={currentTreeData.title}
                    className="w-full h-full object-cover"
                  />
                </div>
              )}
              <Home className="h-4 w-4" />
              {currentTreeData.title}
            </div>

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å */}
            {canEdit && (
              <Tabs value={mode} onValueChange={(value) => setMode(value as Mode)}>
                <TabsList className="bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
                  <TabsTrigger value="view" className="gap-1.5">
                    <Eye className="h-3.5 w-3.5" />
                    –ü—Ä–æ—Å–º–æ—Ç—Ä
                  </TabsTrigger>
                  <TabsTrigger value="edit" className="gap-1.5">
                    <Edit className="h-3.5 w-3.5" />
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            )}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
            {mode === 'edit' && (
              <div className="flex items-center gap-2">
                <div className="px-3 py-1.5 rounded-md text-sm bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border flex items-center gap-2">
                  {saveStatus === 'saved' && (
                    <>
                      <div className="w-2 h-2 rounded-full bg-green-500" />
                      <span className="text-muted-foreground">–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
                    </>
                  )}
                  {saveStatus === 'saving' && (
                    <>
                      <Loader2 className="w-3 h-3 animate-spin text-blue-500" />
                      <span className="text-muted-foreground">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
                    </>
                  )}
                  {saveStatus === 'unsaved' && (
                    <>
                      <div className="w-2 h-2 rounded-full bg-yellow-500" />
                      <span className="text-muted-foreground">–ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
                    </>
                  )}
                  {saveStatus === 'error' && (
                    <>
                      <div className="w-2 h-2 rounded-full bg-red-500" />
                      <span className="text-muted-foreground">–û—à–∏–±–∫–∞</span>
                    </>
                  )}
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ */}
                {saveStatus === 'error' && (
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={handleRetrySync}
                    className="gap-1.5"
                  >
                    <RefreshCw className="h-3.5 w-3.5" />
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                )}
              </div>
            )}
          </div>
        )}

        {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä ReactFlow */}
        {view.type === 'tree' ? (
          <SkillsTreeFlow
            key={treeId}
            treeId={treeId}
            onSkillOpen={handleSkillOpen}
            onItemSelect={handleItemSelect}
            initialNodes={treeNodes}
            initialEdges={treeEdges}
            mode={mode}
            isCustomTree={!!apiTree}
            onDelete={handleDeleteClick}
          />
        ) : (
          <SkillGuidesFlow
            key={`${view.skillId}-${apiTree?.updatedAt || ''}`}
            ref={skillGuidesFlowRef}
            skillId={view.skillId}
            skillData={{
              label: view.skillLabel,
              color: view.skillColor,
            }}
            onItemSelect={handleItemSelect}
            mode={mode}
            onDelete={handleDeleteClick}
            apiGuides={apiTree?.skills?.find(s => s.documentId === view.skillId)?.guides}
            apiGuideEdges={apiTree?.skills?.find(s => s.documentId === view.skillId)?.guideEdges}
          />
        )}
      </div>

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞ - —Å–∫—Ä—ã—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      <div className="hidden md:block w-80 border-l bg-background/50 backdrop-blur-sm p-4">
        {selectedItem ? (
          <div className="space-y-4">
            {selectedItem.thumbnail && (
              <div className="relative w-full aspect-square rounded-lg overflow-hidden">
                <img
                  src={selectedItem.thumbnail}
                  alt={selectedItem.title}
                  className="w-full h-full object-cover"
                />
              </div>
            )}
            <div className="space-y-3">
              {/* –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ */}
              <div className="flex items-center gap-2">
                <Home className="h-4 w-4 text-muted-foreground" />
                <span className="text-xs font-medium text-muted-foreground uppercase tracking-wider">
                  {selectedItem.type === 'tree' && '–î—Ä–µ–≤–æ –Ω–∞–≤—ã–∫–æ–≤'}
                  {selectedItem.type === 'skill' && '–ù–∞–≤—ã–∫'}
                  {selectedItem.type === 'guide' && '–ì–∞–π–¥'}
                </span>
              </div>

              <h3 className="text-lg font-semibold">{selectedItem.title}</h3>

              {selectedItem.type === 'tree' && (
                <div className="space-y-1">
                  {selectedItem.skillCount !== undefined && (
                    <p className="text-sm text-muted-foreground">
                      –ù–∞–≤—ã–∫–æ–≤: {selectedItem.skillCount}
                    </p>
                  )}
                  {selectedItem.guideCount !== undefined && (
                    <p className="text-sm text-muted-foreground">
                      –ì–∞–π–¥–æ–≤: {selectedItem.guideCount}
                    </p>
                  )}
                </div>
              )}

              {selectedItem.type === 'skill' && selectedItem.guideCount !== undefined && (
                <p className="text-sm text-muted-foreground">
                  –ì–∞–π–¥–æ–≤: {selectedItem.guideCount}
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="flex items-center justify-center h-full text-muted-foreground text-sm">
            –í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
          </div>
        )}
      </div>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>{deleteDialogContent.title}</AlertDialogTitle>
            <AlertDialogDescription>
              {deleteDialogContent.description}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeleteConfirm}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              –£–¥–∞–ª–∏—Ç—å
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}